{"version":3,"sources":["Components/Header.js","Components/FormTable.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Grid_default","Typography_default","variant","style","styles","header","userName","Avatar_default","subTitle","Component","columns","key","name","editable","rows","room","length","width","pleats","notes","FormTable","state","onGridRowsUpdated","_ref","fromRow","toRow","updated","_this","setState","slice","i","Object","objectSpread","_this2","this","react_data_grid_default","rowGetter","rowsCount","enableCellSelect","Form","suburb","material","colour","labelWidth","handleChange","event","defineProperty","target","value","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","form","autoComplete","TextField_default","id","label","placeholder","margin","selector","FormControl_default","dropDown","InputLabel_default","ref","Select_default","onChange","input","OutlinedInput_default","MenuItem_default","Components_FormTable","index_es","color","alignItems","marginTop","withStyles","App","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","fetch","then","response","json","console","log","Components_Header","Components_Form","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f679980f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar'\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <Grid>\n                <Typography variant='display3' style={styles.header}>\n                    LOGO\n                </Typography> \n                <Typography variant='display1' style={styles.userName}>\n                    Jack Black\n                    <Avatar>JB</Avatar>\n                </Typography>\n                <Typography variant='display2' style={styles.subTitle}>\n                    Product View\n                </Typography>\n            </Grid>\n        )\n    }\n}\nconst styles = {\n    header: {\n    },\n    userName: {\n        // textAlign: 'right'\n    },\n    subTitle: {\n       \n    }\n}\n\nHeader.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default Header","import React, { Component } from 'react'\nimport ReactDataGrid from \"react-data-grid\";\nimport Typography from '@material-ui/core/Typography'\n\nconst columns = [\n    { key: \"room\", name: \"Room\", editable: true },\n    { key: \"length\", name: \"Length\", editable: true },\n    { key: \"width\", name: \"Width\", editable: true },\n    { key: \"pleats\", name: \"Pleats\", editable: true },\n    { key: \"style\", name: \"Style\", editable: true },\n    { key: \"notes\", name: \"Notes\", editable: true }\n  ];\n  \n  const rows = [\n    { room: \"Living Room 1\", length: 6.1 , width: 6, pleats: \"Single\", style: \"Blind\", notes: \"I would like to\" },\n    { room: \"Living Room 2\", length: 8 , width: 5 , pleats: \"King\", style: \"Curtain\", notes: \"I would like to\" },\n    { room: \"\", length: \"\" , width: \"\", pleats: \"\", style: \"\", notes: \"\" },\n  ];\n\nclass FormTable extends Component {\n    state = { rows } \n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n        this.setState(state => {\n          const rows = state.rows.slice()\n            for (let i = fromRow; i <= toRow; i++) {\n                rows[i] = { ...rows[i], ...updated }\n            }\n          return { rows }\n        })\n      }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <Typography variant='display1'>\n                        Curtains\n                    </Typography>\n                </div>\n                <div>\n                <ReactDataGrid\n                    columns={columns}\n                    rowGetter={i => this.state.rows[i]}\n                    rowsCount={3}\n                    onGridRowsUpdated={this.onGridRowsUpdated}\n                    enableCellSelect={true}\n                />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FormTable;","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n// import {Button} from '@material-ui/core/Button'\n\nimport FormTable from './FormTable'\nimport { Button } from '@material-ui/core';\n\nclass Form extends Component {\n    state = {\n        suburb: '',\n        material: '',\n        colour: '',\n        labelWidth: 0,\n    }\n\n    componentDidMount() {\n        this.setState({\n          labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n        })\n    }\n\n    handleChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    render() {\n        return (\n            <form style={styles.form} autoComplete=\"off\">\n            <TextField\n                id=\"outlined-uncontrolled\"\n                label=\"Customer\"\n                placeholder=\"Enter Your Name\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                style={styles.selector}\n            />\n            <FormControl variant=\"outlined\" style={styles.dropDown}>\n                <InputLabel\n                    ref={ref => {\n                        this.InputLabelRef = ref\n                    }}\n                    // htmlFor=\"outlined-age-simple\"\n                >\n                    Suburb\n                </InputLabel>\n                <Select\n                    value={this.state.suburb}\n                    onChange={this.handleChange}\n                    input={\n                        <OutlinedInput\n                            labelWidth={this.state.labelWidth}\n                            name=\"suburb\"\n                            id=\"outlined-suburb-simple\"\n                        />\n                    }\n                >\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={10}>1</MenuItem>\n                    <MenuItem value={20}>2</MenuItem>\n                    <MenuItem value={30}>3</MenuItem>\n                </Select>\n            </FormControl>\n            <FormControl variant=\"outlined\" style={styles.dropDown}>\n                <InputLabel\n                    ref={ref => {\n                        this.InputLabelRef = ref\n                    }}\n                    // htmlFor=\"outlined-age-simple\"\n                >\n                    Material\n                </InputLabel>\n                <Select\n                    value={this.state.material}\n                    onChange={this.handleChange}\n                    input={\n                        <OutlinedInput\n                            labelWidth={this.state.labelWidth}\n                            name=\"material\"\n                            id=\"outlined-material-simple\"\n                        />\n                    }\n                >\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={10}>1</MenuItem>\n                    <MenuItem value={20}>2</MenuItem>\n                    <MenuItem value={30}>3</MenuItem>\n                </Select>\n            </FormControl>\n            <FormControl variant=\"outlined\" style={styles.dropDown}>\n                <InputLabel\n                    ref={ref => {\n                        this.InputLabelRef = ref\n                    }}\n                    // htmlFor=\"outlined-age-simple\"\n                >\n                    Colour\n                </InputLabel>\n                <Select\n                    value={this.state.material}\n                    onChange={this.handleChange}\n                    input={\n                        <OutlinedInput\n                            labelWidth={this.state.labelWidth}\n                            name=\"colour\"\n                            id=\"outlined-colour-simple\"\n                        />\n                    }\n                >\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    <MenuItem value={10}>1</MenuItem>\n                    <MenuItem value={20}>2</MenuItem>\n                    <MenuItem value={30}>3</MenuItem>\n                </Select>\n            </FormControl>\n            <FormTable />\n            <Button variant='outlined' color='secondary' style={{margin: 20}}>Back</Button>\n            <Button variant='outlined' color='primary' style={{margin: 20}}>Save all changes</Button>\n            <Button variant='contained' style={{margin: 20, alignItems: 'right'}}>Add</Button>\n          </form>\n        )\n    }\n}\n\nconst styles = {\n    form: {\n\n    },\n    selector: {\n        margin: 20,\n    },\n    dropDown: {\n        marginTop: 16,\n        margin: 20,\n        width: 200,\n    }\n}\n\nForm.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Form)","import React, { Component } from 'react';\n\nimport Header from './Components/Header'\nimport Form from './Components/Form'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:8181/colours/')\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n  }\n\n  render() {\n    const { data } = this.state;\n    if(!data){\n      return '';\n    }\n    console.log(data)\n    // const hits = data;\n\n    return (\n      <div>\n        <div>\n          <Header />\n        </div>\n        <div>\n          <Form />\n        </div>\n      </div>\n      // <ul>\n      //   {hits.map(hit =>\n      //     <li key={hit.objectID}>\n      //       <a href={hit.url}>{hit.name}</a>\n      //     </li>\n      //   )}\n      // </ul>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}